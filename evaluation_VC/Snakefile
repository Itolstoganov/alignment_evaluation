

"""
    snakemake --keep-going -j 999999 --cluster "sbatch -A {cluster.account} --C {cluster.C} -c {cluster.cpus-per-task} -N {cluster.Nodes}  -t {cluster.runtime} -J {cluster.jobname} --mail-type={cluster.mail_type} --mail-user={cluster.mail}" --cluster-config cluster.json --configfile experiments.json --latency-wait 100 --verbose -n
"""

shell.prefix("set -o pipefail; ")
configfile: "experiments.json"

# wildcard_constraints:
#     nr_reads="[\d]+",

####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob



def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
   input:  config["ROOT_OUT"] + "/evaluation_SV/time_and_mem.result",
           config["ROOT_OUT"] + "/evaluation_SV/variant_calls.result"
           # config["ROOT_OUT"] + "/evaluation_SV/overlap.result"


rule mason_simulate_variants:
    input:  ref = config["HG38"]
    output: sim_vcf =  config["ROOT_OUT"] + "/hg38_sim_variations.vcf",
            true_vcf_SNV = config["ROOT_OUT"] + "/vcf/SIM3.true.variants.SNV.vcf",
            true_vcf_INDEL = config["ROOT_OUT"] + "/vcf/SIM3.true.variants.INDEL.vcf"
    run:
        # "SIM3" variation rate
        shell("mason_variator --sv-indel-rate 0.000005 --snp-rate 0.001 --small-indel-rate 0.0001 --max-small-indel-size 50   -ir {input.ref} -ov {output.sim_vcf}")
        
        # Split TRUTH into SNP and INDELS
        sim_SNV  = config["ROOT_OUT"] + "/hg38_sim_variations.SNV.vcf"
        shell('grep "#"  {output.sim_vcf}  > {sim_SNV}')
        shell('grep -E "sim_snp" {output.sim_vcf}  >> {sim_SNV}')

        sim_INDEL  = config["ROOT_OUT"] + "/hg38_sim_variations.INDEL.vcf"
        shell('grep "#" {output.sim_vcf}  > {sim_INDEL}')
        shell('grep -E -e "indel" {output.sim_vcf}  >> {sim_INDEL}')

        shell('bcftools sort -Ov {sim_SNV} -o {true_vcf_SNV}')
        shell('bcftools index {true_vcf_SNV}')

        shell('bcftools sort -Ov {sim_INDEL} -o {true_vcf_INDEL}')
        shell('bcftools index {true_vcf_INDEL}')


rule mason_simulate_reads:
    input:  ref = config["HG38"],
             sim_vcf = rules.mason_simulate_variants.output.sim_vcf
    output: sim_fq_L =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset,SIM\d+}/reads_R1.fastq",
            sim_fq_R =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset,SIM\d+}/reads_R2.fastq",
            sim_sam =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset,SIM\d+}.sam"
    # wildcard_constraints:
    #    dataset="SIM*"
    run:
        if wildcards.dataset == "SIM250": # to not give abort trap in simulator due to too low fragment size
            # simulate roughly 30x coverage 3000000000*30/(2*250) =  180000000
            shell("mason_simulator -ir {input.ref} -n 180000000 -iv {input.sim_vcf} --illumina-read-length {wildcards.read_length} -o {output.sim_fq_L} -or {output.sim_fq_R} -oa {output.sim_sam} --fragment-mean-size 700")
        else:
            # simulate roughly 30x coverage 3000000000*30/(2*150) =  300000000
            shell("mason_simulator -ir {input.ref} -n 300000000 -iv {input.sim_vcf} --illumina-read-length {wildcards.read_length} -o {output.sim_fq_L} -or {output.sim_fq_R} -oa {output.sim_sam}")


rule minimap2_index:
    input: ref = config["HG38"]
    output: mm_index =  config["HG38"] + ".mmi",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/minimap2/indexing_time_and_mem.txt",
    run:
        shell("/usr/bin/time -v  minimap2 -t 1 -k21 -w11 -d {output.mm_index} {input.ref}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule minimap2_align:
    input: fastq_L =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R1.fastq",
            fastq_R =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R2.fastq", 
            # ref = config["HG38"],
            index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/minimap2/{dataset}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments_PE/minimap2/{dataset}.sam"
    run:
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  minimap2 -o {tmp_sam} -t 16 -ax sr {input.index} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem}  ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")

rule bwa_mem_index:
    input: ref = config["HG38"]
    output: bwa_index =  config["HG38"] + ".bwt",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/bwa_mem/indexing_time_and_mem.txt",
    run:
        shell("/usr/bin/time -v  bwa index {input.ref}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule bwa_mem_align:
    input: fastq_L = "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R1.fastq",
            fastq_R =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R2.fastq", 
            index = config["HG38"] + ".bwt",
            ref = config["HG38"]
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/bwa_mem/{dataset}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments_PE/bwa_mem/{dataset}.sam"
    run:
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  bwa mem -o {tmp_sam} -t 16 {input.ref} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem} ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")

rule strobealign:
    input:  ref = config["HG38"],
            fastq_L =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R1.fastq",
            fastq_R =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R2.fastq", 
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/strobealign/{dataset}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments_PE/strobealign/{dataset}.sam"
    run: 
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        if wildcards.dataset == "BIO150":
            shell("/usr/bin/time -v  strobealign -t 16 -r 150 -o {tmp_sam} {input.ref} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem}") #  
        elif  wildcards.dataset == "BIO250":
            shell("/usr/bin/time -v  strobealign -t 16 -r 250 -o {tmp_sam} {input.ref} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem}") #  
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")


rule accelalign_index:
    input: ref = config["HG38"]
    output: accelalign_index =  config["HG38"] + ".hash",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/accelalign/indexing_time_and_mem.txt"
    run:
        shell("/usr/bin/time -v  accindex -t 16 {input.ref} 2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule accelalign_align:
    input:  fastq_L =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R1.fastq",
            fastq_R =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R2.fastq", 
            index = rules.accelalign_index.output.accelalign_index
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/accelalign/{dataset}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments_PE/accelalign/{dataset}.sam"
    run:
        ref = config["HG38"]
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  accalign -t 16 -o {tmp_sam} {ref} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem}")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")

rule bowtie2_index:
    input: ref = config["HG38"]
    output: index =  config["HG38"] + "-bt2.1.bt2",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/bowtie2/indexing_time_and_mem.txt"
    run:
        index =  config["HG38"] + "-bt2"
        shell("/usr/bin/time -v  bowtie2-build --threads 1 {input.ref} {index}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule bowtie2_align:
    input:  fastq_L =   "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R1.fastq",
            fastq_R =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R2.fastq", 
            bt2_index =  config["HG38"] + "-bt2.1.bt2",
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/bowtie2/{dataset}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments_PE/bowtie2/{dataset}.sam"
    run:
        ref = config["HG38"]
        bt2_index = config["HG38"] + "-bt2"
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  bowtie2 -X 1000 --local -p 16 -x {bt2_index} -1 {tmp_fq_L} -2 {tmp_fq_R}  -S {tmp_sam}  2>&1 | tee {tmp_time_and_mem}")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")


rule snap_index:
    input: ref = config["HG38"]
    output: snp_index =  directory(config["HG38"] + "_snap_index/GenomeIndexHash"),
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/snap/indexing_time_and_mem.txt",
    run:
        # snap
        shell("/usr/bin/time -v  snap-aligner index {input.ref}  {output.snp_index} 2>&1 | tee {output.time_and_mem}") 

rule snap_align:
    input: fastq_L =   "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R1.fastq",
            fastq_R =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R2.fastq", 
            index = rules.snap_index.output.snp_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/snap/{dataset}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments_PE/snap/{dataset}.sam"
    run:
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        ref = config["HG38"]
        tmp_index = "/scratch/$SLURM_JOB_ID/snap_index/"
        shell("mkdir {tmp_index}")
        shell("/usr/bin/time -v  snap-aligner index {ref}  {tmp_index}") 
        # shell("cp -r {0} /scratch/$SLURM_JOB_ID/snap_index".format(config["HG38"] + "_snap_index"))
        # shell("chmod +x /scratch/$SLURM_JOB_ID/snap_index")
        shell("echo Copied index to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        # snap-aligner paired index-dir read1.fq read2.fq -o output.sam
        # tmp_index = "/scratch/$SLURM_JOB_ID/snap_index/"
        # tmp_index = config["HG38"] + "_snap_index"
        shell("/usr/bin/time -v  snap-aligner paired {tmp_index} {tmp_fq_L} {tmp_fq_R} -o {tmp_sam} -t 16  2>&1 | tee {tmp_time_and_mem}  ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")



# URMAP removed from runtime analysis since we can only run it with 1 thread.
rule urmap_index:
    input: ref = config["HG38"]
    output: ufi_index =  config["HG38"] + ".ufi",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/urmap/indexing_time_and_mem.txt",
    run:
        # urmap -make_ufi hg38.fa -veryfast -output hg38.ufi
        shell("/usr/bin/time -v  urmap -make_ufi {input.ref}  -output {output.ufi_index} 2>&1 | tee {output.time_and_mem}") 

rule urmap_align:
    input: fastq_L =   "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R1.fastq",
            fastq_R =  "/proj/snic2022-6-31/nobackup/data/HG004/{dataset}/reads_R2.fastq",
            index = rules.urmap_index.output.ufi_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem_PE/urmap/{dataset}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments_PE/urmap/{dataset}.sam"
    run:
        mkdir_p(config["ROOT_OUT"] + "/alignments_PE/urmap/{0}/".format(wildcards.dataset))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        # shell("cp {0} /scratch/$SLURM_JOB_ID/index.ufi".format(input.index))
        # shell("echo Copied index to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        # tmp_index = "/scratch/$SLURM_JOB_ID/index.ufi"
        # urmap -map2 sample_R1.fastq.gz -reverse sample_R2.fastq.gz -ufi hg38.ufi -samout sample.sam -o {tmp_sam} -t 1 -ax sr
        shell("/usr/bin/time -v  urmap -map2 {tmp_fq_L} -reverse {tmp_fq_R} -ufi {input.index} -samout {tmp_sam} -threads 16 2>&1 | tee {tmp_time_and_mem}  ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")



rule make_sorted_bam:
    input: sam =  config["ROOT_OUT"] + "/alignments_PE/{tool}/{dataset}.sam"
    output: sorted_bam =  config["ROOT_OUT"] + "/alignments_PE/{tool}/{dataset}.bam"
    run:
        # sam to sorted indexed bam
        shell('samtools view -u {input.sam} | samtools sort -o {output.sorted_bam}')
        shell('samtools index {output.sorted_bam}')
        shell('rm {input.sam}')



rule bcftools_call:
    input: bam = rules.make_sorted_bam.output.sorted_bam,
            ref = config["HG38"]
    output: vcf_SNV = config["ROOT_OUT"] + "/vcf/{tool}/{dataset}.variants.SNV.vcf",
            vcf_INDEL = config["ROOT_OUT"] + "/vcf/{tool}/{dataset}.variants.INDEL.vcf"
    run:
            # call variants
            mkdir_p(config["ROOT_OUT"] + "/vcf/{0}/".format(wildcards.tool))
            vcf_gz = config["ROOT_OUT"] + "/vcf/{0}/{1}.vcf.gz".format(wildcards.tool, wildcards.dataset)
            shell('bcftools mpileup -O z --fasta-ref {input.ref} {input.bam} > {vcf_gz}')

            variants_vcf = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.vcf".format(wildcards.tool, wildcards.dataset)
            shell('bcftools call --threads 16 -v -c -O v {vcf_gz} > {variants_vcf}')

            # Split into SNP and INDELS
            shell('grep -v -E -e "INDEL;" {variants_vcf} > {output.vcf_SNV}')
            shell('grep "#"  {variants_vcf} > {output.vcf_INDEL}')
            shell('grep -E -e "INDEL;"  {variants_vcf} >> {output.vcf_INDEL}')


rule bcftools_intersect_sim:
    input: vcf_SNV = rules.bcftools_call.output.vcf_SNV,
           vcf_INDEL = rules.bcftools_call.output.vcf_INDEL,
           vcf_SNV_true = rules.mason_simulate_variants.output.true_vcf_SNV,
           vcf_INDEL_true = rules.mason_simulate_variants.output.true_vcf_INDEL,
    output: vcf_SNV_ovl = config["ROOT_OUT"] + "/vcf/{tool}/{dataset}.variants.SNV.ovl/sites.txt",
            vcf_INDEL_ovl = config["ROOT_OUT"] + "/vcf/{tool}/{dataset}.variants.INDEL.ovl/sites.txt"
    wildcard_constraints:
        dataset="SIM\d+"
    run:
            # Get true SNV calls
            variants_SNV_sorted_vcf_gz = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.SNV.sorted.vcf.gz".format(wildcards.tool, wildcards.dataset)
            shell('bcftools sort -Oz {input.vcf_SNV} -o {variants_SNV_sorted_vcf_gz}')
            shell('bcftools index {variants_SNV_sorted_vcf_gz}')
            SNV_ovl_output = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.SNV.ovl".format(wildcards.tool, wildcards.dataset)
            shell('bcftools isec --threads 16 --nfiles 2 -O u {input.vcf_SNV_true} {variants_SNV_sorted_vcf_gz} -p {SNV_ovl_output}')

            # Get true INDEL calls
            variants_INDEL_sorted_vcf_gz = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.INDEL.sorted.vcf.gz".format(wildcards.tool, wildcards.dataset)
            shell('bcftools sort -Oz {input.vcf_INDEL} -o {variants_INDEL_sorted_vcf_gz}')
            shell('bcftools index {variants_INDEL_sorted_vcf_gz}')
            INDEL_ovl_output = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.INDEL.ovl".format(wildcards.tool, wildcards.dataset)
            shell('bcftools isec --threads 16 --nfiles 2 -O u {input.vcf_INDEL_true} {variants_INDEL_sorted_vcf_gz} -p {INDEL_ovl_output}')


rule bcftools_split_true:
    input: variants_vcf = "/proj/snic2022-6-31/nobackup/data/HG004/HG004_GRCh38_1_22_v4.2.1_benchmark.vcf.gz"
    output: vcf_SNV = config["ROOT_OUT"] + "/vcf/HG004.true.variants.SNV.vcf",
            vcf_INDEL = config["ROOT_OUT"] + "/vcf/HG004.true.variants.INDEL.vcf"
    # wildcard_constraints:
    #     dataset="BIO*"
    run:
            # Split into SNP and INDELS
            shell('grep -v -E -e "INDEL;" {variants_vcf} > {output.vcf_SNV}')
            shell('grep "#"  {variants_vcf} > {output.vcf_INDEL}')
            shell('grep -E -e "INDEL;"  {variants_vcf} >> {output.vcf_INDEL}')

rule bcftools_intersect_bio:
    input: vcf_SNV = rules.bcftools_call.output.vcf_SNV,
           vcf_INDEL = rules.bcftools_call.output.vcf_INDEL,
           vcf_SNV_true = rules.bcftools_split_true.output.vcf_SNV,
           vcf_INDEL_true = rules.bcftools_split_true.output.vcf_INDEL
    output: vcf_SNV_ovl = config["ROOT_OUT"] + "/vcf/{tool}/{dataset}.variants.SNV.ovl/sites.txt",
            vcf_INDEL_ovl = config["ROOT_OUT"] + "/vcf/{tool}/{dataset}.variants.INDEL.ovl/sites.txt"
    wildcard_constraints:
        dataset="BIO\d+"
    run:
            # Get true SNV calls
            variants_SNV_sorted_vcf_gz = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.SNV.sorted.vcf.gz".format(wildcards.tool, wildcards.dataset)
            shell('bcftools sort -Oz {input.vcf_SNV} -o {variants_SNV_sorted_vcf_gz}')
            shell('bcftools index {variants_SNV_sorted_vcf_gz}')
            SNV_ovl_output = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.SNV.ovl".format(wildcards.tool, wildcards.dataset)
            shell('bcftools isec --threads 16 --nfiles 2 -O u {input.vcf_SNV_true} {variants_SNV_sorted_vcf_gz} -p {SNV_ovl_output}')

            # Get true INDEL calls
            variants_INDEL_sorted_vcf_gz = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.INDEL.sorted.vcf.gz".format(wildcards.tool, wildcards.dataset)
            shell('bcftools sort -Oz {input.vcf_INDEL} -o {variants_INDEL_sorted_vcf_gz}')
            shell('bcftools index {variants_INDEL_sorted_vcf_gz}')
            INDEL_ovl_output = config["ROOT_OUT"] + "/vcf/{0}/{1}.variants.INDEL.ovl".format(wildcards.tool, wildcards.dataset)
            shell('bcftools isec --threads 16 --nfiles 2 -O u {input.vcf_INDEL_true} {variants_INDEL_sorted_vcf_gz} -p {INDEL_ovl_output}')


rule get_stats:
    input: pred_SNV = rules.bcftools_call.output.vcf_SNV,
           pred_INDEL = rules.bcftools_call.output.vcf_INDEL,
           tp_SNV = config["ROOT_OUT"] + "/vcf/{tool}/{dataset}.variants.SNV.ovl/sites.txt",
           tp_INDEL = config["ROOT_OUT"] + "/vcf/{tool}/{dataset}.variants.INDEL.ovl/sites.txt",
    output: stats = config["ROOT_OUT"] + "/results/{tool}/{dataset}/results.txt"
    run:
            script_dir = config["ROOT_IN"] + "/evaluation_VC"
            if wildcards.dataset == "SIM150" or wildcards.dataset == "SIM250":
                true_SNV = config["ROOT_OUT"] + "/vcf/SIM3.true.variants.SNV.vcf",
                true_INDEL = config["ROOT_OUT"] + "/vcf/SIM3.true.variants.INDEL.vcf"
            else:
                true_SNV = config["ROOT_OUT"] + "/vcf/HG004.true.variants.SNV.vcf",
                true_INDEL = config["ROOT_OUT"] + "/vcf/HG004.true.variants.INDEL.vcf"

            shell('python {script_dir}/get_sv_prediction_stats.py -A {wildcards.tool} -R {wildcards.dataset} -V SNV {true_SNV} {input.pred_SNV}  {input.tp_SNV} > {output.stats}')
            shell('python {script_dir}/get_sv_prediction_stats.py -A {wildcards.tool} -R {wildcards.dataset} -V SNV {true_INDEL} {input.pred_INDEL}  {input.tp_INDEL} >> {output.stats}')



rule summary_variant_call_stats:
    input: call_stats_files =  expand(config["ROOT_OUT"] + "/results/{tool}/{dataset}/results.txt",  dataset = ["BIO150", "BIO250", "SIM150", "SIM250"], tool=["minimap2", "bwa_mem", "strobealign", 'accelalign', "bowtie2", "snap", "urmap"])
    output: out = config["ROOT_OUT"] + "/evaluation_SV/variant_calls.result"
    run:
        # summary_file = open(out, "w")
        # args.R, args.A, args.V, round(100*precision, 1), round(100*recall, 1), round(100*f_score, 1)
        shell('echo "dataset,tool,variant,recall,precision,f_score" > {output.out}')

        for f in input.call_stats_files:
            string = f.split("/")
            tool = string[-3]
            dataset = string[-2]
            shell("cat {f} >> {output.out}")



# rule overlap:
#     input: bwa =  config["ROOT_OUT"] + "/alignments_PE/bwa_mem/{dataset}.sam",
#            bowtie2 =  config["ROOT_OUT"] + "/alignments_PE/bowtie2/{dataset}.sam",
#            snap =  config["ROOT_OUT"] + "/alignments_PE/snap/{dataset}.sam",
#            aln =  config["ROOT_OUT"] + "/alignments_PE/{tool}/{dataset}.sam"
#     output: out = config["ROOT_OUT"] + "/evaluation_PE/{tool}/{dataset}.result"
#     run:
#         if wildcards.tool == "minimap2_map" or wildcards.tool == "strobealign_map": 
#             shell("/usr/bin/time -v  python get_overlap.py --sam1 {input.bwa} --sam2 {input.bowtie2} --paf  {input.aln} --tool {wildcards.tool} > {output.out} ")
#             shell("/usr/bin/time -v  python get_overlap.py --sam1 {input.bwa} --sam2 {input.snap} --paf  {input.aln} --tool {wildcards.tool} >> {output.out} ")

#         else:
#             shell("/usr/bin/time -v  python get_overlap.py --sam1 {input.bwa} --sam2 {input.bowtie2} --sam3  {input.aln} --tool {wildcards.tool} > {output.out} ")
#             shell("/usr/bin/time -v  python get_overlap.py --sam1 {input.bwa} --sam2 {input.snap} --sam3  {input.aln} --tool {wildcards.tool} >> {output.out} ")

 

# rule summary_alignment_stats:
#     input: overlap_files = expand(config["ROOT_OUT"] + "/evaluation_PE/{tool}/{dataset}.result",  dataset = ["BIO150", "BIO250"], tool=["minimap2", "bwa_mem", "strobealign",'accelalign', "bowtie2", "strobealign_map", "minimap2_map", "accelalign_map", "snap", "urmap"])
#     output: out = config["ROOT_OUT"] + "/evaluation_SV/overlap.result"
#     run:
#         shell('echo "tool,dataset,read_length,aligned,overlap,overaligned" > {output.out}')
#         for f in input.overlap_files:
#             string = f.split("/")
#             tool = string[-2]
#             dataset = string[-1].split(".")[0]
#             read_length = 250
#             shell("echo -n {tool},{dataset},{read_length}, >> {output.out} ")
#             shell("cat {f} >> {output.out}")
            


rule summary_time_and_mem:
    input: time_and_mem_files =  expand(config["ROOT_OUT"] + "/time_and_mem_PE/{tool}/{dataset}/aligning_time_and_mem.txt",  dataset = ["BIO150", "BIO250", "SIM150", "SIM250"], tool=["minimap2", "bwa_mem", "strobealign", 'accelalign', "bowtie2", "snap", "urmap"])
    output: out = config["ROOT_OUT"] + "/evaluation_SV/time_and_mem.result"
    run:
        # summary_file = open(out, "w")
        shell('echo "tool,dataset,read_length,time,memory" > {output.out}')

        for f in input.time_and_mem_files:
            string = f.split("/")
            tool = string[-3]
            dataset = string[-2]
            if dataset == "BIO150":
                read_length = 150
            elif dataset == "BIO250":
                read_length = 250
            elif dataset == "SIM250":
                read_length = 250
            elif dataset == "SIM150":
                read_length = 150
            shell("/usr/bin/time -v  python summarize_time_and_memory.py {tool} {dataset} {read_length} {f}  >> {output.out} ")






