

"""
    snakemake --keep-going -j 999999 --cluster "sbatch -A {cluster.account} --C {cluster.C} -c {cluster.cpus-per-task} -N {cluster.Nodes}  -t {cluster.runtime} -J {cluster.jobname} --mail-type={cluster.mail_type} --mail-user={cluster.mail}" --cluster-config cluster.json --configfile experiments.json --latency-wait 100 --verbose -n
"""

shell.prefix("set -o pipefail; ")
configfile: "experiments.json"

# wildcard_constraints:
#     nr_reads="[\d]+",

####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob



def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
   input: expand(config["ROOT_OUT"] + "/evaluation/{tool}/{dataset}/{read_length}.result",  dataset =  ["SIM1", "SIM2", "SIM3"], read_length =  ["100", "150", "200", "250", "300"], tool=["minimap2", "bwa_mem"]) #"strobemap", 'bwa', 'bowtie', 'accelalign',


rule mason_simulate_variants:
    input:  ref = config["HG38"]
    output: sim_vcf =  config["ROOT_OUT"] + "/reads/{dataset}/variations.vcf",
    run:
        if wildcards.dataset == "SIM1":
            shell("mason_variator -ir {input.ref} -ov {output.sim_vcf}")
        elif wildcards.dataset == "SIM2":
            shell("mason_variator --sv-indel-rate 0.000001 --snp-rate 0.001 --small-indel-rate 0.00001 --max-small-indel-size 20  -ir {input.ref} -ov {output.sim_vcf}")
        elif wildcards.dataset == "SIM3":
            shell("mason_variator --sv-indel-rate 0.000005 --snp-rate 0.001 --small-indel-rate 0.0001 --max-small-indel-size 50   -ir {input.ref} -ov {output.sim_vcf}")


rule mason_simulate_reads:
    input:  ref = config["HG38"],
            sim_vcf = rules.mason_simulate_variants.output.sim_vcf
    output: sim_fa =  config["ROOT_OUT"] + "/reads/{dataset}/{read_length}.fa",
            sim_sam =  config["ROOT_OUT"] + "/reads/{dataset}/{read_length}.sam",
    run:

        if wildcards.read_length == "250" or wildcards.read_length == "300": # to not give abort trap in simulator due to too low fragmint size
            shell("mason_simulator -ir {input.ref} -n 1000000 -iv {input.sim_vcf} --illumina-read-length {wildcards.read_length} -o {output.sim_fa} -oa {output.sim_sam} --fragment-mean-size 500")
        else:
            shell("mason_simulator -ir {input.ref} -n 1000000 -iv {input.sim_vcf} --illumina-read-length {wildcards.read_length} -o {output.sim_fa} -oa {output.sim_sam}")


rule minimap2_index:
    input: ref = config["HG38"]
    output: mm_index =  config["HG38"] + ".mmi"
            # time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/minimap2/{dataset}/{read_length}_indexing_time_and_mem.txt",
    run:
        # ref = config["HG38"]

        outfolder = config["ROOT_OUT"] + "/alignments/minimap2/{0}/".format(wildcards.dataset)
        mkdir_p(outfolder)
        time_outfolder = config["ROOT_OUT"] + "/time_and_mem/minimap2/{0}/".format(wildcards.dataset)
        mkdir_p(time_outfolder)

        shell("/usr/bin/time -v  minimap2 -t 1 -k21 -w11 -d {output.mm_index} {input.ref}") #  2> {output.time_and_mem}

rule minimap2_align:
    input: fasta =   rules.mason_simulate_reads.output.sim_fa,
            index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/minimap2/{dataset}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/minimap2/{dataset}/{read_length}.sam"
    run:
        shell("/usr/bin/time -v  minimap2 -t 1 -ax sr {input.index} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")

rule bwa_mem_index:
    input: ref = config["HG38"]
    output: bwa_index =  config["HG38"] + ".bwt"
            # time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bwa_mem/{dataset}/{read_length}_indexing_time_and_mem.txt",
    run:
        # ref = config["HG38"]

        # outfolder = config["ROOT_OUT"] + "/alignments/bwa_mem/{0}/".format(wildcards.dataset)
        # mkdir_p(outfolder)
        # time_outfolder = config["ROOT_OUT"] + "/time_and_mem/bwa_mem/{0}/".format(wildcards.dataset)
        # mkdir_p(time_outfolder)

        shell("/usr/bin/time -v  bwa index {input.ref}") #  2> {output.time_and_mem}

rule bwa_mem_align:
    input: fasta =   rules.mason_simulate_reads.output.sim_fa,
            index = config["HG38"] + ".bwt",
            ref = config["HG38"]
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bwa_mem/{dataset}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/bwa_mem/{dataset}/{read_length}.sam"
    run:
        shell("/usr/bin/time -v  bwa mem -t 1  {input.ref} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")

# rule bowtie2_index:
#     input: ref = config["HG38"]
#     output: bwa_index =  config["HG38"] + ".bwt"
#             # time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bwa_mem/{dataset}/{read_length}_indexing_time_and_mem.txt",
#     run:
#         # ref = config["HG38"]

#         outfolder = config["ROOT_OUT"] + "/alignments/bwa_mem/{0}/".format(wildcards.dataset)
#         mkdir_p(outfolder)
#         time_outfolder = config["ROOT_OUT"] + "/time_and_mem/bwa_mem/{0}/".format(wildcards.dataset)
#         mkdir_p(time_outfolder)

#         shell("/usr/bin/time -v  bowtie2 index {input.ref}") #  2> {output.time_and_mem}

# rule bowtie2_align:
#     input: fasta =   rules.mason_simulate_reads.output.sim_fa,
#             index = config["HG38"] + ".bwt",
#             ref = config["HG38"]
#     output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bwa_mem/{dataset}/{read_length}/aligning_time_and_mem.txt",
#             sam =  config["ROOT_OUT"] + "/alignments/bwa_mem/{dataset}/{read_length}.sam"
#     run:
#         shell("/usr/bin/time -v  bwa mem -t 1  {input.ref} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")



rule accuracy:
    input: aln =  config["ROOT_OUT"] + "/alignments/{tool}/{dataset}/{read_length}.sam",
            truth =  config["ROOT_OUT"] + "/reads/{dataset}/{read_length}.sam"
    output: out = config["ROOT_OUT"] + "/evaluation/{tool}/{dataset}/{read_length}.result"
    run:
        shell("/usr/bin/time -v  python get_accuracy.py --truth {input.truth} --predicted_sam aln > {output.out} ")


