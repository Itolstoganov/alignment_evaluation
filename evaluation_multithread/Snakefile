

"""
    snakemake --keep-going -j 999999 --cluster "sbatch -A {cluster.account} --C {cluster.C} -c {cluster.cpus-per-task} -N {cluster.Nodes}  -t {cluster.runtime} -J {cluster.jobname} --mail-type={cluster.mail_type} --mail-user={cluster.mail}" --cluster-config cluster.json --configfile experiments.json --latency-wait 100 --verbose -n
"""

shell.prefix("set -o pipefail; ")
configfile: "experiments.json"

# wildcard_constraints:
#     nr_reads="[\d]+",

####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob



def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
   input:  config["ROOT_OUT"] + "/evaluation_multithread/time_and_mem.result" 
            # config["ROOT_OUT"] + "/evaluation_multithread/accuracy.result"


rule minimap2_index:
    input: ref = config["HG38"]
    output: mm_index =  config["HG38"] + ".mmi",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/minimap2/indexing_time_and_mem.txt",
    run:
        shell("/usr/bin/time -v  minimap2 -t 1 -k21 -w11 -d {output.mm_index} {input.ref}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule minimap2_align:
    input: fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
           fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq",
            # ref = config["HG38"],
            index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/minimap2/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/minimap2/{n_threads}/{read_length}.sam"
    run:
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  minimap2 -o {tmp_sam} -t {wildcards.n_threads} -ax sr {input.index} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem} ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")

rule minimap2_map:
    input: fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
           fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq",
            index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/minimap2_map/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/minimap2_map/{n_threads}/{read_length}.sam"
    run:
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  minimap2 -o {tmp_sam} -t {wildcards.n_threads} -x sr {input.index} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem} ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")

rule bwa_mem_index:
    input: ref = config["HG38"]
    output: bwa_index =  config["HG38"] + ".bwt",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bwa_mem/indexing_time_and_mem.txt",
    run:
        shell("/usr/bin/time -v  bwa index {input.ref}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule bwa_mem_align:
    input: fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
           fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq",
            index = config["HG38"] + ".bwt",
            ref = config["HG38"]
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bwa_mem/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/bwa_mem/{n_threads}/{read_length}.sam"
    run:
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  bwa mem -o {tmp_sam} -t {wildcards.n_threads} {input.ref} {tmp_fq_L} {tmp_fq_R}  2>&1 | tee {tmp_time_and_mem} ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")


rule strobealign:
    input:  ref = config["HG38"],
            fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
            fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq"
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/strobealign/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/strobealign/{n_threads}/{read_length}.sam"
    run: 
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  strobealign -t {wildcards.n_threads} -o {tmp_sam} {input.ref} {tmp_fq_L} {tmp_fq_R}  2>&1 | tee {tmp_time_and_mem}") #  
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")


rule strobealign_map:
    input:  ref = config["HG38"],
            fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
            fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq"
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/strobealign_map/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/strobealign_map/{n_threads}/{read_length}.sam"
    run: 
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  strobealign -t {wildcards.n_threads} -x -o {tmp_sam} {input.ref} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem}") #  
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")

rule accelalign_index:
    input: ref = config["HG38"]
    output: accelalign_index =  config["HG38"] + ".hash",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/accelalign/indexing_time_and_mem.txt"
    run:
        shell("/usr/bin/time -v  accindex -t {wildcards.n_threads} {input.ref} 2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule accelalign_align:
    input: fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
           fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq",
            index = rules.accelalign_index.output.accelalign_index
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/accelalign/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/accelalign/{n_threads}/{read_length}.sam"
    run:
        ref = config["HG38"]
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  accalign -t {wildcards.n_threads} -o {tmp_sam} {ref} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem}")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")

rule accelalign_map:
    input: fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
           fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq",
            index = rules.accelalign_index.output.accelalign_index
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/accelalign_map/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/accelalign_map/{n_threads}/{read_length}.sam"
    run:
        ref = config["HG38"]
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        shell("/usr/bin/time -v  accalign -t {wildcards.n_threads} -x -o {tmp_sam} {ref} {tmp_fq_L} {tmp_fq_R} 2>&1 | tee {tmp_time_and_mem}")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")


rule bowtie2_index:
    input: ref = config["HG38"]
    output: index =  config["HG38"] + "-bt2.1.bt2",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bowtie2/indexing_time_and_mem.txt"
    run:
        index =  config["HG38"] + "-bt2"
        shell("/usr/bin/time -v  bowtie2-build --threads {wildcards.n_threads} {input.ref} {index}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule bowtie2_align:
    input: fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
           fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq",
            bt2_index =  config["HG38"] + "-bt2.1.bt2"
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bowtie2/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/bowtie2/{n_threads}/{read_length}.sam"
    run:
        ref = config["HG38"]
        bt2_index = config["HG38"] + "-bt2"
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        if wildcards.read_length == "250" or wildcards.read_length == "300":
            shell("/usr/bin/time -v  bowtie2 -X 1000 -p {wildcards.n_threads} -x {bt2_index} -1 {tmp_fq_L} -2 {tmp_fq_R}  -S {tmp_sam}  2>&1 | tee {tmp_time_and_mem}")        
        else:
            shell("/usr/bin/time -v  bowtie2 -p {wildcards.n_threads} -x {bt2_index} -1 {tmp_fq_L} -2 {tmp_fq_R}  -S {tmp_sam}  2>&1 | tee {tmp_time_and_mem}")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")


rule urmap_index:
    input: ref = config["HG38"]
    output: ufi_index =  config["HG38"] + ".ufi",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/urmap/indexing_time_and_mem.txt",
    run:
        # urmap -make_ufi hg38.fa -veryfast -output hg38.ufi
        shell("/usr/bin/time -v  urmap -make_ufi {input.ref}  -output {output.ufi_index} 2>&1 | tee {output.time_and_mem}") 

rule urmap_align:
    input: fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
           fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq",
            index = rules.urmap_index.output.ufi_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/urmap/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/urmap/{n_threads}/{read_length}.sam"
    run:
        mkdir_p(config["ROOT_OUT"] + "/alignments/urmap/{0}/".format(wildcards.n_threads))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        # shell("cp {0} /scratch/$SLURM_JOB_ID/index.ufi".format(input.index))
        # shell("echo Copied index to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        # tmp_index = "/scratch/$SLURM_JOB_ID/index.ufi"
        # urmap -map2 sample_R1.fastq.gz -reverse sample_R2.fastq.gz -ufi hg38.ufi -samout sample.sam -o {tmp_sam} -t 1 -ax sr
        shell("/usr/bin/time -v  urmap -map2 {tmp_fq_L} -reverse {tmp_fq_R} -ufi {input.index} -samout {tmp_sam} -threads {wildcards.n_threads}  2>&1 | tee {tmp_time_and_mem}  ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")


rule snap_index:
    input: ref = config["HG38"]
    output: snp_index =  config["HG38"] + "_snap_index/GenomeIndexHash",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/snap/indexing_time_and_mem.txt",
    run:
        # snap
        shell("/usr/bin/time -v  snap-aligner index {input.ref}  {output.snp_index} 2>&1 | tee {output.time_and_mem}") 

rule snap_align:
    input: fastq_L = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_L.fq",
           fastq_R = config["ROOT_OUT"] + "/reads_PE/SIM3/{read_length}_R.fq",
            index = rules.snap_index.output.snp_index
    output: time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/snap/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  config["ROOT_OUT"] + "/alignments/snap/{n_threads}/{read_length}.sam"
    run:
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_L.fq".format(input.fastq_L))
        shell("cp {0} /scratch/$SLURM_JOB_ID/reads_R.fq".format(input.fastq_R))
        shell("echo Copied reads to: $SLURM_JOB_ID")
        # shell("mkdir /scratch/$SLURM_JOB_ID/snap_index")
        # shell("cp -r {0} /scratch/$SLURM_JOB_ID/snap_index".format(config["HG38"] + "_snap_index"))
        # shell("echo Copied index to: $SLURM_JOB_ID")
        tmp_time_and_mem = "/scratch/$SLURM_JOB_ID/aligning_time_and_mem.txt"
        tmp_sam = "/scratch/$SLURM_JOB_ID/aligned.sam"
        tmp_fq_L = "/scratch/$SLURM_JOB_ID/reads_L.fq"
        tmp_fq_R = "/scratch/$SLURM_JOB_ID/reads_R.fq"
        # snap-aligner paired index-dir read1.fq read2.fq -o output.sam
        # tmp_index = "/scratch/$SLURM_JOB_ID/snap_index/"
        tmp_index = config["HG38"] + "_snap_index"
        shell("/usr/bin/time -v  snap-aligner paired {tmp_index} {tmp_fq_L} {tmp_fq_R} -o {tmp_sam} -t {wildcards.n_threads}  2>&1 | tee {tmp_time_and_mem}  ")
        shell("mv {tmp_time_and_mem} {output.time_and_mem}")
        shell("mv {tmp_sam} {output.sam}")




# rule accuracy:
#     input: aln =  config["ROOT_OUT"] + "/alignments/{tool}/{n_threads}/{read_length}.sam",
#             truth =  config["ROOT_OUT"] + "/reads/{n_threads}/{read_length}.sam"
#     output: out = config["ROOT_OUT"] + "/evaluation_multithread/{tool}/{n_threads}/{read_length}.result"
#     run:
#         if wildcards.tool == "minimap2_map" or wildcards.tool == "strobealign_map":
#             shell("/usr/bin/time -v  python get_accuracy.py --truth {input.truth} --predicted_paf  {input.aln} > {output.out} ")
#         else:
#             shell("/usr/bin/time -v  python get_accuracy.py --truth {input.truth} --predicted_sam  {input.aln} > {output.out} ")



# rule summary_alignment_stats:
#     input: accuracy_files = expand(config["ROOT_OUT"] + "/evaluation_multithread/{tool}/{n_threads}/{read_length}.result",  n_threads =  ["2", "4", "8", "16"], read_length =  ["100", "150", "200", "250", "300"], tool=["minimap2", "bwa_mem", "strobealign",'accelalign', "bowtie2", "strobealign_map", "minimap2_map", "accelalign_map"])
#     output: out = config["ROOT_OUT"] + "/evaluation_multithread/accuracy.result"
#     run:
#         shell('echo "tool,dataset,read_length,aligned,accuracy,overaligned" > {output.out}')
#         for f in input.accuracy_files:
#             string = f.split("/")
#             tool = string[-3]
#             dataset = string[-2]
#             read_length = string[-1].split(".")[0]
#             shell("echo -n {tool},{n_threads},{read_length}, >> {output.out} ")
#             shell("cat {f} >> {output.out}")
            
# n_threads =  ["2", "4", "8", "16"], read_length =  ["100", "150", "200", "250", "300"], tool=["minimap2", "bwa_mem", "strobealign", 'accelalign', "bowtie2", "strobealign_map", "minimap2_map", "accelalign_map"]

rule summary_time_and_mem:
    input: time_and_mem_files =  expand(config["ROOT_OUT"] + "/time_and_mem/{tool}/{n_threads}/{read_length}/aligning_time_and_mem.txt", n_threads =  ["4", "8", "16"], read_length =  ["100", "150", "200", "250", "300"], tool=["minimap2", "bwa_mem", "strobealign", 'accelalign', "bowtie2", "strobealign_map", "minimap2_map", "accelalign_map", "urmap", "snap"])
    output: out = config["ROOT_OUT"] + "/evaluation_multithread/time_and_mem.result"
    run:
        # summary_file = open(out, "w")
        shell('echo "tool,threads,read_length,time,memory" > {output.out}')

        for f in input.time_and_mem_files:
            string = f.split("/")
            tool = string[-4]
            n_threads = string[-3]
            read_length = string[-2]
            shell("/usr/bin/time -v  python summarize_time_and_memory.py {tool} {n_threads} {read_length} {f}  >> {output.out} ")









