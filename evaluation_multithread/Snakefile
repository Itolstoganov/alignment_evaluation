

"""
    snakemake --keep-going -j 999999 --cluster "sbatch -A {cluster.account} --C {cluster.C} -c {cluster.cpus-per-task} -N {cluster.Nodes}  -t {cluster.runtime} -J {cluster.jobname} --mail-type={cluster.mail_type} --mail-user={cluster.mail}" --cluster-config cluster.json --configfile experiments.json --latency-wait 100 --verbose -n
"""

shell.prefix("set -o pipefail; ")
configfile: "experiments.json"

# wildcard_constraints:
#     nr_reads="[\d]+",

####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob



def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
   input:  config["ROOT_OUT"] + "/evaluation_multithread/time_and_mem.result" 
            # config["ROOT_OUT"] + "/evaluation_multithread/accuracy.result"
            # expand(config["ROOT_OUT"] + "/evaluation_multithread/{tool}/{n_threads}/{read_length}.result",  dataset =  ["SIM1", "SIM2", "SIM3"], read_length =  ["100", "150", "200", "250", "300"], tool=["minimap2", "bwa_mem", "strobealign"]) #"strobealign", 'bwa', 'bowtie', 'accelalign',


# rule mason_simulate_variants:
#     input:  ref = config["HG38"]
#     output: sim_vcf =  config["ROOT_OUT"] + "/reads/SIM1/variations.vcf",
#     run:
#         if wildcards.dataset == "SIM1":
#             shell("mason_variator -ir {input.ref} -ov {output.sim_vcf}")
#         elif wildcards.dataset == "SIM2":
#             shell("mason_variator --sv-indel-rate 0.000001 --snp-rate 0.001 --small-indel-rate 0.00001 --max-small-indel-size 20  -ir {input.ref} -ov {output.sim_vcf}")
#         elif wildcards.dataset == "SIM3":
#             shell("mason_variator --sv-indel-rate 0.000005 --snp-rate 0.001 --small-indel-rate 0.0001 --max-small-indel-size 50   -ir {input.ref} -ov {output.sim_vcf}")


# rule mason_simulate_reads:
#     input:  ref = config["HG38"],
#             sim_vcf = rules.mason_simulate_variants.output.sim_vcf
#     output: sim_fa =  config["ROOT_OUT"] + "/reads/SIM1/{read_length}.fa",
#             sim_sam =  config["ROOT_OUT"] + "/reads/SIM1/{read_length}.sam",
#     run:

#         if wildcards.read_length == "250" or wildcards.read_length == "300" or wildcards.read_length == "500": # to not give abort trap in simulator due to too low fragmint size
#             shell("mason_simulator -ir {input.ref} -n 10000000 -iv {input.sim_vcf} --illumina-read-length {wildcards.read_length} -o {output.sim_fa} -oa {output.sim_sam} --fragment-mean-size 1000")
#         else:
#             shell("mason_simulator -ir {input.ref} -n 10000000 -iv {input.sim_vcf} --illumina-read-length {wildcards.read_length} -o {output.sim_fa} -oa {output.sim_sam}")

# rule fasta_to_fastq:
#     input: fasta = rules.mason_simulate_reads.output.sim_fa,
#     output: fastq = config["ROOT_OUT"] + "/reads/SIM1/{read_length}.fq"
#     run:
#         shell("fasta2fastq  {input.fasta} {output.fastq}")


rule minimap2_index:
    input: ref = config["HG38"]
    output: mm_index =  config["HG38"] + ".mmi",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/minimap2/indexing_time_and_mem.txt",
    run:
        shell("/usr/bin/time -v  minimap2 -t 1 -k21 -w11 -d {output.mm_index} {input.ref}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule minimap2_align:
    input: fasta =   "/dev/shm/kris/{read_length}.fa",
            # ref = config["HG38"],
            index = rules.minimap2_index.output.mm_index
    output: time_and_mem = "/scratch/kris/minimap2/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  "/scratch/kris/minimap2/{n_threads}/{read_length}.sam" 
    run:
        # shell("/usr/bin/time -v  minimap2 -t 1 -ax sr {input.index} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")
        shell("/usr/bin/time -v  minimap2 -t {wildcards.n_threads} -ax sr {input.index} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")

rule minimap2_map:
    input: fasta =   "/dev/shm/kris/{read_length}.fa",
            # ref = config["HG38"],
            index = rules.minimap2_index.output.mm_index
    output: time_and_mem = "/scratch/kris/minimap2_map/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  "/scratch/kris/minimap2_map/{n_threads}/{read_length}.sam" 
    run:
        # shell("/usr/bin/time -v  minimap2 -t 1 -ax sr {input.index} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")
        shell("/usr/bin/time -v  minimap2 -t {wildcards.n_threads} -x sr {input.index} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")


rule bwa_mem_index:
    input: ref = config["HG38"]
    output: bwa_index =  config["HG38"] + ".bwt",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bwa_mem/indexing_time_and_mem.txt",
    run:
        shell("/usr/bin/time -v  bwa index {input.ref}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule bwa_mem_align:
    input: fasta =   "/dev/shm/kris/{read_length}.fa",
            index = config["HG38"] + ".bwt",
            ref = config["HG38"]
    output: time_and_mem = "/scratch/kris/bwa_mem/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  "/scratch/kris/bwa_mem/{n_threads}/{read_length}.sam" 
    run:
        shell("/usr/bin/time -v  bwa mem -t {wildcards.n_threads}  {input.ref} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")


rule strobemap_align:
    input:  ref = config["HG38"],
            fasta =   "/dev/shm/kris/{read_length}.fa"
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem = "/scratch/kris/strobealign/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  "/scratch/kris/strobealign/{n_threads}/{read_length}.sam" 
    run: 
        shell("/usr/bin/time -v  strobealign -t {wildcards.n_threads} -o {output.sam} {input.ref} {input.fasta} 2>&1 | tee {output.time_and_mem}") #  


rule strobemap_map:
    input:  ref = config["HG38"],
            fasta =   "/dev/shm/kris/{read_length}.fa"
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem = "/scratch/kris/strobealign_map/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  "/scratch/kris/strobealign_map/{n_threads}/{read_length}.sam" 
    run: 
        shell("/usr/bin/time -v  strobealign -t {wildcards.n_threads} -x -o {output.sam} {input.ref} {input.fasta} 2>&1 | tee {output.time_and_mem}") #  


rule accelalign_index:
    input: ref = config["HG38"]
    output: accelalign_index =  config["HG38"] + ".hash",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/accelalign/indexing_time_and_mem.txt"
    run:
        shell("/usr/bin/time -v  accindex -t {wildcards.n_threads} {input.ref} 2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule accelalign_align:
    input: fastq =  "/dev/shm/kris/{read_length}.fa",
            index = rules.accelalign_index.output.accelalign_index,
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem = "/scratch/kris/accelalign/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  "/scratch/kris/accelalign/{n_threads}/{read_length}.sam" 
    run:
        ref = config["HG38"]
        # shell("/usr/bin/time -v  minimap2 -t 1 -ax sr {input.index} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")
        shell("/usr/bin/time -v  accalign -t {wildcards.n_threads} -o {output.sam} {ref} {input.fastq} 2>&1 | tee {output.time_and_mem}")

rule accelalign_map:
    input: fastq =  "/dev/shm/kris/{read_length}.fa",
            index = rules.accelalign_index.output.accelalign_index,
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem = "/scratch/kris/accelalign_map/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  "/scratch/kris/accelalign_map/{n_threads}/{read_length}.sam" 
    run:
        ref = config["HG38"]
        # shell("/usr/bin/time -v  minimap2 -t 1 -ax sr {input.index} {input.fasta} 1>  {output.sam} 2> {output.time_and_mem} ")
        shell("/usr/bin/time -v  accalign -t {wildcards.n_threads} -x -o {output.sam} {ref} {input.fastq} 2>&1 | tee {output.time_and_mem}")

rule bowtie2_index:
    input: ref = config["HG38"]
    output: index =  config["HG38"] + "-bt2.1.bt2",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/bowtie2/indexing_time_and_mem.txt"
    run:
        index =  config["HG38"] + "-bt2"
        shell("/usr/bin/time -v  bowtie2-build --threads {wildcards.n_threads} {input.ref} {index}  2>&1 | tee {output.time_and_mem}") #  2> {output.time_and_mem}

rule bowtie2_align:
    input: fasta =   "/dev/shm/kris/{read_length}.fa",
            bt2_index =  config["HG38"] + "-bt2.1.bt2",
            # index = rules.minimap2_index.output.mm_index
    output: time_and_mem = "/scratch/kris/bowtie2/{n_threads}/{read_length}/aligning_time_and_mem.txt",
            sam =  "/scratch/kris/bowtie2/{n_threads}/{read_length}.sam" 
    run:
        ref = config["HG38"]
        bt2_index = config["HG38"] + "-bt2"
        shell("/usr/bin/time -v  bowtie2 -p {wildcards.n_threads} -x {bt2_index} -f -U {input.fasta}  -S {output.sam}  2>&1 | tee {output.time_and_mem}")



# rule accuracy:
#     input: aln =  config["ROOT_OUT"] + "/alignments/{tool}/{n_threads}/{read_length}.sam",
#             truth =  config["ROOT_OUT"] + "/reads/{n_threads}/{read_length}.sam"
#     output: out = config["ROOT_OUT"] + "/evaluation_multithread/{tool}/{n_threads}/{read_length}.result"
#     run:
#         if wildcards.tool == "minimap2_map" or wildcards.tool == "strobealign_map":
#             shell("/usr/bin/time -v  python get_accuracy.py --truth {input.truth} --predicted_paf  {input.aln} > {output.out} ")
#         else:
#             shell("/usr/bin/time -v  python get_accuracy.py --truth {input.truth} --predicted_sam  {input.aln} > {output.out} ")



# rule summary_alignment_stats:
#     input: accuracy_files = expand(config["ROOT_OUT"] + "/evaluation_multithread/{tool}/{n_threads}/{read_length}.result",  n_threads =  ["2", "4", "8", "16"], read_length =  ["100", "150", "200", "250", "300"], tool=["minimap2", "bwa_mem", "strobealign",'accelalign', "bowtie2", "strobealign_map", "minimap2_map", "accelalign_map"])
#     output: out = config["ROOT_OUT"] + "/evaluation_multithread/accuracy.result"
#     run:
#         shell('echo "tool,dataset,read_length,aligned,accuracy,overaligned" > {output.out}')
#         for f in input.accuracy_files:
#             string = f.split("/")
#             tool = string[-3]
#             dataset = string[-2]
#             read_length = string[-1].split(".")[0]
#             shell("echo -n {tool},{n_threads},{read_length}, >> {output.out} ")
#             shell("cat {f} >> {output.out}")
            


rule summary_time_and_mem:
    input: time_and_mem_files =  expand("/scratch/kris/{tool}/{n_threads}/{read_length}/aligning_time_and_mem.txt",  n_threads =  ["2", "4", "8", "16"], read_length =  ["100", "150", "200", "250", "300"], tool=["minimap2", "bwa_mem", "strobealign", 'accelalign', "bowtie2", "strobealign_map", "minimap2_map", "accelalign_map"])
    output: out = config["ROOT_OUT"] + "/evaluation_multithread/time_and_mem.result"
    run:
        # summary_file = open(out, "w")
        shell('echo "tool,threads,read_length,time,memory" > {output.out}')

        for f in input.time_and_mem_files:
            string = f.split("/")
            tool = string[-4]
            n_threads = string[-3]
            read_length = string[-2]
            shell("/usr/bin/time -v  python summarize_time_and_memory.py {tool} {n_threads} {read_length} {f}  >> {output.out} ")









